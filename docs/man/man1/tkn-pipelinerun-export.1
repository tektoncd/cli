.TH "TKN\-PIPELINERUN\-EXPORT" "1" "" "Auto generated by spf13/cobra" "" 
.nh
.ad l


.SH NAME
.PP
tkn\-pipelinerun\-export \- Export PipelineRun


.SH SYNOPSIS
.PP
\fBtkn pipelinerun export\fP


.SH DESCRIPTION
.PP
Export PipelineRun


.SH OPTIONS
.PP
\fB\-\-allow\-missing\-template\-keys\fP[=true]
    If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for export

.PP
\fB\-o\fP, \fB\-\-output\fP=""
    Output format. One of: json|yaml|name|go\-template|go\-template\-file|template|templatefile|jsonpath|jsonpath\-as\-json|jsonpath\-file.

.PP
\fB\-\-show\-managed\-fields\fP[=false]
    If true, keep the managedFields when printing objects in JSON or YAML format.

.PP
\fB\-\-template\fP=""
    Template string or path to template file to use when \-o=go\-template, \-o=go\-template\-file. The template format is golang templates [
\[la]http://golang.org/pkg/text/template/#pkg-overview\[ra]].


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB\-c\fP, \fB\-\-context\fP=""
    name of the kubeconfig context to use (default: kubectl config current\-context)

.PP
\fB\-k\fP, \fB\-\-kubeconfig\fP=""
    kubectl config file (default: $HOME/.kube/config)

.PP
\fB\-n\fP, \fB\-\-namespace\fP=""
    namespace to use (default: from $KUBECONFIG)

.PP
\fB\-C\fP, \fB\-\-no\-color\fP[=false]
    disable coloring (default: false)


.SH EXAMPLE
.PP
Export PipelineRun Definition:

.PP
.RS

.nf
tkn pipelinerun export will export a pipelinerun definition as yaml to be easily
imported or modified.

Example: export a PipelineRun named 'pipelinerun' in namespace 'foo' and recreate
it in the namespace 'bar':

tkn pr export pipelinerun \-n foo|kubectl create \-f\- \-n bar

.fi
.RE


.SH SEE ALSO
.PP
\fBtkn\-pipelinerun(1)\fP
