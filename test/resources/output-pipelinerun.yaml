# Copyright 2018 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
  name: skaffold-git
  namespace: tektoncd
spec:
  type: git
  params:
  - name: revision
    value: master
  - name: url
    value: https://github.com/GoogleContainerTools/skaffold
---
# Task writes "some stuff" to a predefined path in the workspace git PipelineResource
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: create-file
  namespace: tektoncd
spec:
  inputs:
    resources:
    - name: workspace
      type: git
      targetPath: damnworkspace
  outputs:
    resources:
    - name: workspace
      type: git
  steps:
  - name: read-docs-old
    image: ubuntu
    command: ["/bin/bash"]
    args: ['-c', 'ls -la /workspace/damnworkspace/docs/README.md'] # tests that targetpath works
  - name: write-new-stuff
    image: ubuntu
    command: ['bash']
    args: ['-c', 'echo some stuff > /workspace/damnworkspace/stuff']
---
# Reads a file from a predefined path in the workspace git PipelineResource
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: check-stuff-file-exists
  namespace: tektoncd
spec:
  inputs:
    resources:
    - name: workspace
      type: git
      targetPath: newworkspace
  steps:
  - name: read
    image: ubuntu
    command: ["/bin/bash"]
    args: ['-c', 'cat /workspace/newworkspace/stuff'] # tests that new targetpath and previous task output is dumped
---
#The Output of the first Task (git resource) create-file is given as an `Input`
# to the next `Task` check-stuff-file-exists using`from` clause.

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: output-pipeline
  namespace: tektoncd
spec:
  resources:
  - name: source-repo
    type: git
  tasks:
  - name: first-create-file          # 1. create file
    taskRef:
      name: create-file
    resources:
      inputs:
      - name: workspace
        resource: source-repo
      outputs:
      - name: workspace
        resource: source-repo
  - name: then-check                 # 2.  check file exists
    taskRef:
      name: check-stuff-file-exists
    resources:
      inputs:
      - name: workspace
        resource: source-repo
        from: [first-create-file]
---
apiVersion: tekton.dev/v1alpha1
kind: PipelineRun
metadata:
  name: output-pipeline-run
  namespace: tektoncd
spec:
  pipelineRef:
    name: output-pipeline
  serviceAccount: 'default'
  resources:
  - name: source-repo
    resourceRef:
      name: skaffold-git