# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Task writes "some stuff" to a predefined path in the workspace git PipelineResource

apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: create-file
spec:
  inputs:
    resources:
    - name: workspace
      type: git
      targetPath: damnworkspace
    params:
      - name: FILEPATH
      - name: FILENAME
  outputs:
    resources:
    - name: workspace
      type: git
  steps:
  - name: read-docs-old
    image: ubuntu
    command: ["/bin/bash"]
    args: ['-c', 'ls -la /workspace/damnworkspace/$(inputs.params.FILEPATH)/$(inputs.params.FILENAME)']  # tests that targetpath works
  - name: write-new-stuff
    image: ubuntu
    command: ['bash']
    args: ['-c', 'ln -s /workspace/damnworkspace /workspace/output/workspace && echo some stuff > /workspace/output/workspace/stuff']
---
# Reads a file from a predefined path in the workspace git PipelineResource
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: check-stuff-file-exists
spec:
  inputs:
    resources:
    - name: workspace
      type: git
      targetPath: newworkspace
  steps:
  - name: read
    image: ubuntu
    command: ["/bin/bash"]
    args: ['-c', 'cat /workspace/newworkspace/stuff']  # tests that new targetpath and previous task output is dumped
---
# The Output of the first Task (git resource) create-file is given as an `Input`
# to the next `Task` check-stuff-file-exists using`from` clause.

apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: output-pipeline
spec:
  resources:
  - name: source-repo
    type: git
  params:
    - name: FILEPATH
      default: "docs"
    - name: FILENAME
  tasks:
  - name: first-create-file          # 1. create file
    taskRef:
      name: create-file
    params:
      - name: FILEPATH
        value: $(params.FILEPATH)
      - name: FILENAME
        value: $(params.FILENAME)
    resources:
      inputs:
      - name: workspace
        resource: source-repo
      outputs:
      - name: workspace
        resource: source-repo
  - name: then-check                 # 2.  check file exists
    taskRef:
      name: check-stuff-file-exists
    resources:
      inputs:
      - name: workspace
        resource: source-repo
        from: [first-create-file]